{"name":"Nodemock","tagline":"Simple Yet Powerful Mocking Framework for NodeJs","body":"NodeMock is a very simple to use mocking framework which can be used to \r\nmock functions in JavaScript objects. \r\nNodeMock creates mock methods in less code with more expressive manner\r\n\r\nFeatures\r\n--------\r\nBesides it's simplicity it supports following features\r\n\r\n* Does not need an existing object to create the mock\r\n* Verify arguments (we check deeply on objects and arrays to check the validity)\r\n* Allow a return to be sent\r\n* Assertion to check whether all the rules executed\r\n* Callbacks can also be executed with providing arguments\r\n* Multiple mock functions in one object\r\n* Alter a mock function later on\r\n* Method chaining allows creating mocks super easy\r\n* Fail support added when calling method that should not be called\r\n* Mock support to call a single method more than once\r\n* Repetitive support\r\n* ignore methods from mocking behaviour\r\n\t\r\nTesting\r\n-------\r\nNode JS can be used with any testing framework. And we've used it with Nodeunit and it's a perfect match.\r\n[See Examples](https://github.com/arunoda/nodemock/blob/master/test/nodemock.js \"Nodemock with Nodeunit\")\r\n\r\nInstall\r\n---------\r\n\tnpm install nodemock\r\n\r\nUsage\r\n------\r\n\r\n### Load the Module\r\n\tvar nodemock = require(\"nodemock\");\r\n\r\n### Creating a mock function with taking arguments and return value\r\n\tvar mocked = nodemock.mock(\"foo\").takes(10, [10, 20, 30]).returns(98);\r\n\t\r\n\tmocked.foo(10, [10, 20, 30]); // this will return 98\r\n\t\r\n\tmocked.foo(10); //throws execption\r\n\t\r\n### Creating a mock with callback support\r\n\tvar mocked = nodemock.mock(\"foo\").takes(20, function(){}).calls(1, [30, 40]);\r\n\t\r\n\tmocked.foo(20, function(num, arr) {\r\n\t\tconsole.log(num); //prints 30\r\n\t\tconsole.log(arr); //prints 40\r\n\t});\r\n\t\r\n\t/*\r\n\t\tWhen you invoke foo() nodemock will calls the callback(sits in argument index 1 - as specified)\r\n\t\twith the parameters 30 and 40 respectively. \r\n\t*/\r\n\r\n### Controlling callbacks\r\nWith the asynchronous nature of NodeJS(and brower with AJAX too) it'll be great if we can control the execution of the callback in the testing environment. And `ctrl()` of nodemock helps that\r\n\r\n\tvar ctrl = {};\r\n\tvar mocked = nodemock.mock('foo').takes(10, function() {}).ctrl(1, ctrl);\r\n\t//where ever in your codebase\r\n\tctrl.trigger(10, 20); // you can call this as many as you want\r\n\t\r\n### Add multiple mock functions\r\n\tvar mocked = nodemock.mock(\"foo\").takes(10).returns(30);\r\n\tmocked.foo(10); //gives 30\r\n\t\r\n\tmocked.mock(\"bar\").takes(true).returns(40);\r\n\tmocked.bar(true); // gives 40\r\n\r\n\t\r\n### Assertion Support\r\n\tvar mocked = nodemock.mock(\"foo\").takes(20);\r\n\tvar mocked = nodemock.mock(\"bar\").takes(40);\r\n\t\r\n\tmocked.foo(20);\r\n\tmocked.bar(40);\r\n\t\r\n\t//check whether what we've defined is actually executed\r\n\tmocked.assert(); //returns true\r\n\t\r\n### Fails when calls any method in the mock object\r\n\tvar mocked = nodemock.fail();\r\n\tmocked.foo(); //thorws an exception\r\n\tmocked.bar(); //throws an exception\r\n\t\r\n### Fails when calls some particular method in the mock object\r\n\tvar mocked = nodemock.mock(\"foo\").fail();\r\n\tmocked.mock(\"bar\").takes(10);\r\n\tmocked.foo(); //thorws an exception\r\n\tmocked.bar(10); //works perfectly\r\n\t\r\n### calls a single mocked method, multiple times\r\n\t\r\n\tvar mocked = nodemock.mock(\"foo\").takes(10, 20).times(2);\r\n\t\r\n\tmocked.foo(10, 20);\r\n\tmocked.foo(10, 20);\r\n\r\n### calls a single mocked method, multiple times with different returns\r\n\t\r\n\tvar mocked = nodemock.mock(\"foo\").takes(10, 20).returns(100);\r\n\tmocked.mock('foo').takes(10, 20).returns(200);\r\n\r\n\tmocked.foo(10, 20); //returns 100\r\n\tmocked.foo(10, 20); //returns 200\r\n\t\r\n### mock a single method more than once\r\n\tvar mocked = nodemock.mock(\"foo\").takes(10, 20);\r\n\tmocked.mock(\"foo\").takes(20, 30);\r\n\tmocked.mock(\"foo\").takes(500);\r\n\t\r\n\tmocked.foo(10, 20);\r\n\tmocked.foo(20, 30)\r\n\tmocked.foo(500);\r\n\t\r\n\t//check whether everything has done\r\n\tmocked.assert(); //returns true\r\n\r\n### reset the mock\r\n\t\r\n\tvar mocked = nm.mock('foo').returns(100);\r\n\tmocked.foo(); //returns 100\r\n\tmocked.assert(); //returns true\r\n\t\t\r\n\tmocked.reset();\r\n\t\r\n\tmocked.mock('doo').returns(300);\r\n\tmocked.doo(); //returns 300\r\n\tmock.assert() //returns true\r\n\r\n### ignore method\r\nSometime we need to ignore some methods going through mocking rules. But we need to have those methods but doing nothing.\r\n\r\n\tvar mocked = mock.ignore('hello');\r\n\tmocked.mock('foo').returns(100);\r\n\r\n\tmock.foo(); //returns 100\r\n\tmock.hello(); //do nothing but the method exists\r\n\r\n\tmock.assert(); // return true, assert have nothing to do with ignored methods\r\nAPI Documentation\r\n-----------------\r\n\r\n### Construction ###\r\n\r\n\tvar mocked = require('nodemock').mock('foo');\r\n\t\tCreating a object with mock function \"foo\"\r\n\t\r\n\tmocked.mock(methodName)\r\n\t\tUsed to alter or create a new mock method and add rules to it as usual\r\n\t\t\r\n### Rules ###\r\n\r\n\tmocked.takes(arg1, args2, ...)\r\n\t\tSpecify arguments of the function and verify then when calling\r\n\t\t\r\n\tmocked.returns(returnValue)\r\n\t\tSpecify the return value of the function\r\n\t\t\r\n\tmocked.calls(callbackPosition, argumentsArray)\t\t \r\n\t\tCalls a callback at the arguments in index `callbackPosition`\r\n\t\twith the arguments specified in the \"argumentsArray\"\r\n\t\t\r\n\t\twhen using this you've to define a function signature as a callback in the argument list\r\n\t\tfor a callback at index 2 .takes() function will be as,\r\n\t\tmocked.takes(10, 20, function(){})\r\n\t\r\n\t\t\r\n\tmocked.fail()\r\n\t\tIf calls at very begining afterword any call on the mocked objects will fail\r\n\t\tOtherwise current mock method will fails someone called that. \r\n\t\t\r\n\tmocked.times(repetitiveCount);\r\n\t\tWe can rule the mocked method to be called multiple times with same parameters\r\n\t\tFinally we can check that using above assert method;\r\n\r\n\tmocked.reset()\r\n\t\tReset all the rules and mocks created. And bring mocked object into a stage when \r\nit's created\r\n\r\n\tmocked.ignore()\r\n\t\tIgnore Some methods from the mocking behaviour\r\n\t\r\n### Confirm ###\r\n\r\n\tmocked.assert();\r\n\t\tChecks whether rules we've defined using other methods were executed.\r\n\t\tIf all the rules were executed return true, otherwise false\r\n\r\n\tmocked.assertThrows();\r\n\t\tSame as the mocked.assert() but throws an execption if rules breaks.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}